= Simple build environment concept =

The project provides CMake scripts usable in CMakeLists.txt of CPP package.

CPP package can be
  * Library (e.g. [https://code.google.com/p/sbe-documentlibrary DocumentLibrary])
  * Executable (e.g. [https://code.google.com/p/sbe-helloworld HelloWorld])
  * Unit Test Framework (e.g. [https://code.google.com/p/sbe-cpputestlibrary CppUTest])
  * Project - group of Libraries/Executables (e.g. [https://code.google.com/p/sbe-documentationsystem DocumentationSystem])

The scripts supports
  * Dependency management
  * Build 
  * Unit testing
  * Continuous Integration
  * Coverity

== Dependency management ==

Each package has file Properties.cmake. The file contains package description(e.g. [https://code.google.com/p/sbe-documentlibrary/source/browse/trunk/Properties.cmake Properties.cmake for DocumentLibrary]).

One property is `DEPENDENCIES`. It contains description of each dependency used by package.

Each dependency has to have goals `install` and `uninstall`. During installation, dependency has to export targets. The scripts [https://code.google.com/p/cmake-simple-build-environment/source/browse/trunk/scripts/AddInstallTarget.cmake AddInstallTarget.cmake], [https://code.google.com/p/cmake-simple-build-environment/source/browse/trunk/scripts/AddUninstallTarget.cmake AddUninstallTarget.cmake] do this work. The export file is then used in `FIND_PACKAGE` during configuration of dependent package. 

=== How it works ===

In your package CMakeLists.txt you have to include [https://code.google.com/p/cmake-simple-build-environment/source/browse/trunk/scripts/DeployDependencies.cmake DeployDependencies.cmake] (e.g. [https://code.google.com/p/sbe-documentlibrary/source/browse/trunk/CMakeLists.txt CMakeLists.txt for DocumentLibrary])

The script performs two steps
  * Exports sources (it uses [https://code.google.com/p/cmake-simple-build-environment/source/browse/trunk/scripts/ExportDependencies.cmake ExportDependencies.cmake])
  * Install sources (it uses [https://code.google.com/p/cmake-simple-build-environment/source/browse/trunk/scripts/InstallDependencies.cmake InstallDependencies.cmake])

During package configuration all dependencies are exported recursively and they are installed. Installation is necessary during package configuration, because include paths and libraries created by dependency are discovered by `FIND_PACKAGE`.

When dependencies are change their sources are deleted and dependency is uninstalled.

==== Export Sources ====

The script [https://code.google.com/p/cmake-simple-build-environment/source/browse/trunk/scripts/ExportDependencies.cmake ExportDependencies.cmake] uses `DEPENDENCIES` property defined in CMakeLists.txt to get all dependencies URL in repository.

It exports Properties.cmake recursively for each dependency and generates file `dependencies/info/info.cmake` in package. The file contains all properties from all dependencies.

Once all properties from all dependencies are exported, scripts performs
  # make dependency picture - it uses [http://plantuml.sourceforge.net/ plantuml]
  # check dependencies versions and report error if any - now exact version has to be used
    http://cmake-simple-build-environment.googlecode.com/svn/wiki/images/DependencyGraph.png
  # check dependencies installation order and report error if any
  # remove unused dependencies
  # exports dependencies sources

==== Install sources ====

The script [https://code.google.com/p/cmake-simple-build-environment/source/browse/trunk/scripts/InstallDependencies.cmake InstallDependencies.cmake] uses `dependencies/info/info.cmake` prepared by [https://code.google.com/p/cmake-simple-build-environment/source/browse/trunk/scripts/ExportDependencies.cmake ExportDependencies.cmake]. 

The scripts performs:
  # creates build directory `current_project_build_directory/dependencies/build/dependency_name` 
  # configure dependency in created build directory. `CMAKE_TOOLCHAIN_FILE` is propagated to dependency. If coverity is requested, it is performed.

== Build ==



== Unit testing ==

== Continues Integration ==

== Coverity ==